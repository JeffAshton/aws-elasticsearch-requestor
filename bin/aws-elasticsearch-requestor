#!/usr/bin/env node

const _ = require( 'lodash' );
const fs = require( 'fs' );
const requestor = require( '../src/index.js' );

const awsRegion = process.env.AWS_REGION || process.env.AWS_DEFAULT_REGION;
if( !awsRegion ) {
	console.error( 'AWS_REGION not set' );
	process.exit( 1 );
}

const httpMethods = [ 'GET', 'HEAD', 'POST', 'PUT', 'DELETE' ];

function showUsage( message ) {

	console.error( message );
	console.error( `
Usage: aws-elasticsearch-requestor <httpMethod> <elasticsearchUrl> [bodyPath]

	httpMethod: One of ${ _.join( httpMethods, ', ' ) }
	elasticsearchUrl: The full elasticsearch url
	bodyPath: Path to a json file to include as the body (Optional)
	` );

	process.exit( 2 );
}

const httpMethod = process.argv[ 2 ];
if( !httpMethod ) {
	return showUsage( 'httpMethod not specified' );
}
if( !_.includes( httpMethods, httpMethod ) ) {
	return showUsage( `Invalid httpMethod: ${ httpMethod }` );
}

const elasticsearchUrl = process.argv[ 3 ];
if( !elasticsearchUrl ) {
	return showUsage( 'elasticsearchUrl not specified' );
}

let bodyBuffer = null;

const bodyPath = process.argv[ 4 ];
if( bodyPath ) {
	bodyBuffer = fs.readFileSync( bodyPath );
}

return requestor( awsRegion, httpMethod, elasticsearchUrl, bodyBuffer )
	.then( result => {
		console.info( result );
		process.exit( 0 );
	} )
	.catch( err => {
		let errOutput = err;

		const response = err.response;
		if( response ) {

			if( response.headers && response.headers[ 'content-type' ] == 'application/json' ) {
				if( _.isString( response.body ) ) {
					response.body = JSON.parse( response.body );
				}
			}

			errOutput = response;
		}

		console.error( JSON.stringify( errOutput, null, 2 ) );
		process.exit( 100 );
	} );
